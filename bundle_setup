#!/bin/sh

# variables are one liners because for some reason, when generated - new lines in the script tab over in the actual file

# webpack_config.js
webpack_config_js='var path = require("'path'");\n\nmodule.exports = {\n\tcontext: __dirname,\n\tentry: "'./frontend/entry.jsx'",\n\toutput: {\n\t\tpath: path.join(__dirname, "'app'", "'assets'", "'javascripts'"),\n\t\tfilename: "'bundle.js'"\n\t},\n\tdevtool: "'source-map'",\n\tresolve: {\n\t\textensions: ["''", "'.js'", "'.jsx'"]\n\t},\n\tmodule: {\n\t\tloaders: [\n\t\t\t{\n\t\t\t\ttest: /\.jsx?$/,\n\t\t\t\texclude: /(node_modules|bower_components)/,\n\t\t\t\tloader: "'babel'",\n\t\t\t\tquery: {\n\t\t\t\t\tpresets: ["'react'", "'es2015'"]\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\ttest: /\.node$/,\n\t\t\t\tloader: "'node-loader'"\n\t\t\t}\n\t\t]\n\t}\n};\n'

# entry.jsx
entry_jsx="var React = require('react');\nvar ReactDOM = require('react-dom');\nvar Router = require('react-router').Router;\nvar Route = require('react-router').Route;\nvar HashHistory = require('react-router').hashHistory;\n\nvar App = require('./components/app.jsx');\n\nvar routes = (\n\t<Route path='/' component={App}>\n\t</Route>\n);\n\ndocument.addEventListener('DOMContentLoaded', function () {\n\tReactDOM.render(\n\t\t<Router history={HashHistory}>{routes}</Router>,\n\t\tdocument.getElementById('root')\n\t);\n});\n"

# app.jsx
app_jsx="var React = require('react');\n\nmodule.exports = React.createClass({\n\trender: function () {\n\t\treturn(\n\t\t\t<div>\n\t\t\t\tHello World!\n\t\t\t\t{this.props.children}\n\t\t\t</div>\n\t\t);\n\t}\n});\n"

# server_actions.js
server_actions="var Dispatcher = require('../dispatcher/dispatcher.js');\n// Example Constants call\n// var PokemonConstants = require('../constants/pokemonConstants.js');\n\nvar ServerActions = {\n// Example Function\n//  receiveAllPokemons: function (pokemons) {\n//    Dispatcher.dispatch({\n//      actionType: PokemonConstants.POKEMONS_RECEIVED,\n//      pokemons: pokemons\n//    });\n//  }\n};\n\nmodule.exports = ServerActions;"

# client_actions.js
client_actions="var ApiUtil = require('../util/apiUtil.js');\n\nvar ClientActions = {\n// Example Function\n//  fetchAllPokemons: function() {\n//    ApiUtil.fetchAllPokemons();\n//  };\n};\n\nmodule.exports = ClientActions;"

#dispatcher.js
dispatcher="var Dispatcher = require('flux').Dispatcher;\nmodule.exports = new Dispatcher();"

# api_util.js
api_utils="var ServerActions = require('../actions/serverActions.js');\n\nmodule.exports = {\n// Example Function\n//  createPokemon: function (pokemon, callback) {\n//    $.ajax({\n//      url: 'api/pokemon',\n//      method: 'POST',\n//      dataType: 'json',\n//      data: {pokemon: pokemon},\n//      success: function (pokemon) {\n//        ServerActions.receiveSinglePokemon(pokemon);\n//        callback && callback(pokemon.id);\n//      }\n//    });\n//  }\n};"


#######################################################
# The Code Begins
##############################################

# NPM
npm init --yes
npm install --save webpack
npm install --save react
npm install --save react-addons-linked-state-mixin
npm install --save react-dom
npm install --save react-router
npm install --save babel-core
npm install --save babel-loader
npm install --save babel-preset-es2015
npm install --save babel-preset-react
npm install --save flux

# root route
echo "Rails.application.routes.draw do\n
\troot to: 'static_pages#root.html'\n
end\n
" > config/routes.rb

# webpack.config.js
echo $webpack_config_js > webpack.config.js

# .gitignore node_modules and bundle.js
echo "\n\nnode_modules\nbundle.js" >> .gitignore

# generate static_pages_controller and view
rails generate controller static_pages
echo "<div id='root'></div>" > app/views/static_pages/root.html

  # frontend
  mkdir frontend
  cd frontend

    # entry.jsx
    echo $entry_jsx > entry.jsx

      # frontend subdirectories
      mkdir actions components constants dispatcher stores utils

      # app_jsx
      echo $app_jsx > components/app.jsx

      # server_actions
      echo $server_actions > actions/server_actions.js

      # client_actions
      echo $client_actions > actions/client_actions.js

      # Dispatcher
      echo $dispatcher > dispatcher/dispatcher.js

      # api_utils
      echo $api_utils > utils/api_utils.js

# return from frontend/ to project root
cd ..